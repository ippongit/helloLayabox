var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**This class is automatically generated by LayaAirIDE, please do not make any modifications. */


var _CheckRaycast = require("./script/CheckRaycast");

var _CheckRaycast2 = _interopRequireDefault(_CheckRaycast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameConfig = function () {
    function GameConfig() {
        _classCallCheck(this, GameConfig);
    }

    _createClass(GameConfig, null, [{
        key: "init",
        value: function init() {
            //注册Script或者Runtime引用
            var reg = Laya.ClassUtils.regClass;
            reg("script/CheckRaycast.js", _CheckRaycast2.default);
        }
    }]);

    return GameConfig;
}();

exports.default = GameConfig;

GameConfig.width = 1280;
GameConfig.height = 720;
GameConfig.scaleMode = "showall";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "center";
GameConfig.startScene = "main.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;

GameConfig.init();

},{"./script/CheckRaycast":3}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GameConfig = require("./GameConfig");

var _GameConfig2 = _interopRequireDefault(_GameConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Main = function () {
	function Main() {
		_classCallCheck(this, Main);

		//根据IDE设置初始化引擎		
		if (window["Laya3D"]) Laya3D.init(_GameConfig2.default.width, _GameConfig2.default.height);else Laya.init(_GameConfig2.default.width, _GameConfig2.default.height, Laya["WebGL"]);
		Laya["Physics"] && Laya["Physics"].enable();
		Laya["DebugPanel"] && Laya["DebugPanel"].enable();
		Laya.stage.scaleMode = _GameConfig2.default.scaleMode;
		Laya.stage.screenMode = _GameConfig2.default.screenMode;
		Laya.stage.alignV = _GameConfig2.default.alignV;
		Laya.stage.alignH = _GameConfig2.default.alignH;
		//兼容微信不支持加载scene后缀场景
		Laya.URL.exportSceneToJson = _GameConfig2.default.exportSceneToJson;

		//打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
		if (_GameConfig2.default.debug || Laya.Utils.getQueryString("debug") == "true") Laya.enableDebugPanel();
		if (_GameConfig2.default.physicsDebug && Laya["PhysicsDebugDraw"]) Laya["PhysicsDebugDraw"].enable();
		if (_GameConfig2.default.stat) Laya.Stat.show();
		Laya.alertGlobalError = true;

		//激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
		Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
	}

	_createClass(Main, [{
		key: "onVersionLoaded",
		value: function onVersionLoaded() {
			//激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
			Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
		}
	}, {
		key: "onConfigLoaded",
		value: function onConfigLoaded() {
			//加载IDE指定的场景
			_GameConfig2.default.startScene && Laya.Scene.open(_GameConfig2.default.startScene);
		}
	}]);

	return Main;
}();
//激活启动类


new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**CheckRaycast */
var CheckRaycast = function (_Laya$Scene) {
    _inherits(CheckRaycast, _Laya$Scene);

    function CheckRaycast() {
        _classCallCheck(this, CheckRaycast);

        return _possibleConstructorReturn(this, (CheckRaycast.__proto__ || Object.getPrototypeOf(CheckRaycast)).call(this));
    }

    _createClass(CheckRaycast, [{
        key: "onEnable",
        value: function onEnable() {
            var conut = 0;
            var vertexs = [];
            var checkedPoint = null;
            Laya.stage.on(Laya.Event.CLICK, this, function (e) {
                var point = new laya.maths.Point(e.stageX, e.stageY);
                if (vertexs.length < 5) {
                    if (vertexs.length > 0) {
                        var lastPoint = vertexs[vertexs.length - 1];
                        Laya.stage.graphics.drawLine(lastPoint.x, lastPoint.y, point.x, point.y, "#ffffff", 3);
                    }
                    vertexs.push(point);
                    if (vertexs.length === 5) {
                        var startPoint = vertexs[0];
                        Laya.stage.graphics.drawLine(startPoint.x, startPoint.y, point.x, point.y, "#ffffff", 3);
                    }
                } else {
                    //定义原点(0,0)
                    var origin = new laya.maths.Point(0, 0);
                    var checkResut = this.checkCross(origin, point, vertexs);
                    //如果射线穿过多边形，是绿色
                    var color = "#00ff00";
                    //如果射线未穿过多边形，是黄色
                    if (checkResut === false) color = "#ffff00";
                    this.graphics.clear();
                    var endX = 1500;
                    var endY = point.y * endX / point.x;
                    this.graphics.drawLine(origin.x, origin.y, endX, endY, color, 3);
                }
            });
        }

        /**检测直线穿过一个多边形 */

    }, {
        key: "checkCross",
        value: function checkCross(startPoint, stopPoint, vertexs) {
            var x_startPoint = startPoint.x;
            var y_startPoint = startPoint.y;
            var x_stopPoint = stopPoint.x;
            var y_stopPoint = stopPoint.y;

            var up = 0;
            var down = 0;
            var crossed = false;

            var k = (y_stopPoint - y_startPoint) / (x_stopPoint - x_startPoint);
            for (var i = 0; i < vertexs.length; i++) {
                var xi = vertexs[i].x,
                    yi = vertexs[i].y;
                var y_cut = k * (xi - x_startPoint) + y_startPoint;
                //多边形与直线相切或穿过
                if (y_cut == yi) {
                    crossed = true;
                    return crossed;
                } else {
                    if (yi > y_cut) up++;else down++;
                }
            }
            if (up > 0 && down > 0) {
                crossed = true;
            }
            return crossed;
        }
    }]);

    return CheckRaycast;
}(Laya.Scene);

exports.default = CheckRaycast;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
